% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/repeatcv.R
\name{repeatcv}
\alias{repeatcv}
\title{Repeated nested CV}
\usage{
repeatcv(
  expr,
  n = 5,
  repeat_folds = NULL,
  keep = FALSE,
  extra = FALSE,
  progress,
  rep.cores,
  allow_multithreading = if (is(plan(), "sequential")) TRUE else FALSE
)
}
\arguments{
\item{expr}{An expression containing a call to \code{\link[=nestcv.glmnet]{nestcv.glmnet()}},
\code{\link[=nestcv.train]{nestcv.train()}}, \code{\link[=nestcv.SuperLearner]{nestcv.SuperLearner()}} or \code{\link[=outercv]{outercv()}}.}

\item{n}{Number of repeats}

\item{repeat_folds}{Optional list containing fold indices to be applied to
the outer CV folds.}

\item{keep}{Logical whether to save repeated outer CV fitted models for
variable importance, SHAP etc. Note this can make the resulting object very
large.}

\item{extra}{Logical whether additional performance metrics are gathered for
binary classification models. See \code{\link[=metrics]{metrics()}}.}

\item{progress}{(Ignored for backward-compatibilty.)}

\item{rep.cores}{(Ignored for backward-compatibilty. Use \code{\link[future:plan]{future::plan()}}
instead.)}

\item{allow_multithreading}{Logical whether to enable (TRUE) or disable
(FALSE) multithreading for caret models that are able to use it. It is
generally recommended to disable multithreading when using multiplke
processes.}
}
\value{
List of S3 class 'repeatcv' containing: \item{call}{the model call}
\item{result}{matrix of performance metrics}
\item{output}{a matrix or dataframe containing the outer CV predictions from
each repeat}
\item{roc}{(binary classification models only) a ROC curve object based on
predictions across all repeats as returned in \code{output}, generated by
\code{pROC::roc()}}
\item{fits}{(if \code{keep = TRUE}) list of length \code{n} containing slimmed
'nestedcv' model objects for calculating variable importance or SHAP values}
}
\description{
Performs repeated calls to a \code{nestedcv} model to determine performance across
repeated runs of nested CV.
}
\details{
We recommend using this with the R pipe \verb{|>} (see examples).

When comparing models, it is recommended to fix the sets of outer CV folds
used across each repeat for comparing performance between models. The
function \code{\link[=repeatfolds]{repeatfolds()}} can be used to create a fixed set of outer CV
folds for each repeat.

Parallelisation over repeats is performed using
\code{\link[future.apply:future_apply]{future.apply::future_apply()}}, following the normal rules for nested
parallelisation. In general parallelisation of the repeats is faster than
parallelisation of the nested CV.
}
\examples{
\donttest{
data("iris")
dat <- iris
y <- dat$Species
x <- dat[, 1:4]

res <- nestcv.glmnet(y, x, family = "multinomial", alphaSet = 1,
                     n_outer_folds = 4) |>
       repeatcv(3)
res
summary(res)

## set up fixed fold indices
set.seed(123, "L'Ecuyer-CMRG")
folds <- repeatfolds(y, repeats = 3, n_outer_folds = 4)
res <- nestcv.glmnet(y, x, family = "multinomial", alphaSet = 1,
                     n_outer_folds = 4) |>
       repeatcv(3, repeat_folds = folds)
res
}
}
