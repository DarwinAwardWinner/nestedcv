% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nestedcv.R
\name{nestcv.glmnet}
\alias{nestcv.glmnet}
\title{Nested cross-validation with glmnet}
\usage{
nestcv.glmnet(
  y,
  x,
  filterFUN = NULL,
  n_outer_folds = 10,
  n_inner_folds = 10,
  alphaSet = seq(0.8, 1, 0.05),
  min_1se = 0,
  keep_innerCV_pred = TRUE,
  cores = 1,
  filterArgs = NULL,
  ...
)
}
\arguments{
\item{y}{Response vector}

\item{x}{Matrix of predictors}

\item{filterFUN}{Filter function, e.g. \link{uni_filter} or \link{relieff_filter}.
Any function can be provided and is passed \code{y} and \code{x}. Must return a
character vector with names of filtered predictors.}

\item{n_outer_folds}{Number of outer CV folds}

\item{n_inner_folds}{Number of inner CV folds}

\item{alphaSet}{Vector of alphas to be tuned}

\item{min_1se}{Value from 0 to 1 specifying choice of optimal lambda from
0=lambda.min to 1=lambda.1se}

\item{keep_innerCV_pred}{Logical indicating whether inner CV predictions are
retained for calculating left-out inner CV fold accuracy etc. See \code{keep} in
\link{cv.glmnet}.}

\item{cores}{Number of cores for parallel processing. Note this currently
uses \link[parallel:mclapply]{parallel::mclapply}.}

\item{filterArgs}{Optional list of additional arguments to be passed to a
function specified by \code{filterFUN}.}

\item{...}{Optional arguments passed to \link{cv.glmnet}}
}
\value{
An object with S3 class "nestcv.glmnet"
}
\description{
Nested cross-validation (CV) with glmnet including tuning of elastic net
alpha parameter and embedding of a filter function within the nested CV.
}
